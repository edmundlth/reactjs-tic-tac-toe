{"version":3,"sources":["components.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","boardState","numCell","startVal","cells","push","renderSquare","numRow","numCol","rows","renderRow","renderBoard","React","Component","Array","prototype","last","length","Game","freshState","history","fill","xIsNext","state","JSON","parse","stringify","slice","squares","getWinner","setState","concat","checkWin","symbol","_checkArray","_getDiag","_getRow","_getCol","rowIndex","cellIndex","output","j","colIndex","off","offset","array","a","b","arraysEqual","pop","status","winner","handleClick","undo","Clock","date","Date","timerID","setInterval","tick","clearInterval","toLocaleTimeString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ba09058.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length !== b.length) return false;\n\n    // If you don't care about the order of the elements inside\n    // the array, you should sort both arrays here.\n    // Please note that calling sort on an array will modify that array.\n    // you might want to clone your array first.\n\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction Square(props) {\n    return (\n        <button\n            className={\"square\"}\n            onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\nexport class Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.boardState[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    renderRow(numCell, startVal) {\n        let cells = [];\n        for (let i = 0; i < numCell; i++) {\n            cells.push(this.renderSquare(startVal + i));\n        }\n        return (\n            <div className={\"board-row\"}>\n                {cells}\n            </div>\n        )\n    }\n\n    renderBoard(numRow, numCol) {\n        let rows = [];\n        for (let i = 0; i < numRow * numCol; i += numCol) {\n            rows.push(this.renderRow(numCol, i))\n        }\n        return (\n            <div className={\"game-board\"}>{rows}</div>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                {this.renderBoard(this.props.numRow, this.props.numCol)}\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport {arraysEqual, Board} from \"./components\";\n\nif (!Array.prototype.last){\n    Array.prototype.last = function(){\n        return this[this.length - 1];\n    };\n}\n\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.numRow = props.numRow;\n        this.numCol = props.numCol;\n        this.freshState = {\n            history: [Array(this.numRow * this.numCol).fill(null)],\n            xIsNext: true,\n        };\n        this.state = JSON.parse(JSON.stringify(this.freshState));  // deep copy\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice();\n        const squares = history.last().slice();\n        if (this.getWinner() || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([squares]),\n            xIsNext: !this.state.xIsNext,\n        });\n        // console.log(JSON.stringify(this.state));\n    }\n\n    getWinner() {\n        if (this.checkWin('X')) {\n            return 'X'\n        } else if (this.checkWin('O')) {\n            return 'O'\n        } else {\n            return null\n        }\n    }\n\n    checkWin(symbol) {\n        if (this._checkArray(this._getDiag(false), symbol) || this._checkArray(this._getDiag(true), symbol)) {\n            return true\n        }\n\n        for (let i = 0; i < this.numRow; i++) {\n            if (this._checkArray(this._getRow(i), symbol)) {\n                return true\n            }\n        }\n\n        for (let i = 0; i < this.numCol; i++) {\n            if (this._checkArray(this._getCol(i), symbol)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    _getRow(rowIndex) {\n        let output = [];\n        let cellIndex;\n        for (let j = 0; j < this.numCol; j++) {\n            cellIndex = rowIndex * this.numCol + j;\n            output.push(this.state.history.last()[cellIndex]);\n        }\n        return output\n    }\n\n    _getCol(colIndex) {\n        let output = [];\n        for (let cellIndex = colIndex; cellIndex < this.numRow * this.numCol; cellIndex += this.numCol) {\n            output.push(this.state.history.last()[cellIndex]);\n        }\n        return output\n    }\n\n    _getDiag(off=false) {\n        let offset = off ? -1 : 1;\n        let output = [];\n        for (let i = off ? this.numCol - 1 : 0; i < this.numCol * this.numRow + offset; i += this.numCol + offset) {\n            output.push(this.state.history.last()[i])\n        }\n        return output\n    }\n\n    _checkArray(array, symbol) {\n        return arraysEqual(array, Array(array.length).fill(symbol))\n    }\n\n    undo() {\n        if (this.state.history.length <= 1) {\n            return\n        }\n        let history = this.state.history.slice();\n        history.pop();\n        this.setState({\n            history: history,\n            xIsNext: !this.state.xIsNext\n        });\n    }\n\n    render() {\n        let status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n        const winner = this.getWinner();\n        if (winner != null) {\n            status = `Winner: ${winner}`\n        }\n        return (\n            <div className=\"game\">\n                <div className={\"game-board\"}>\n                    <Board\n                        numRow={this.numRow}\n                        numCol={this.numCol}\n                        boardState={this.state.history.last()}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n\n                <div className={\"game-info\"}>\n                    <div className={\"status\"}>{status}</div>\n\n                    <button\n                    className={\"refesh-button\"}\n                    onClick={() => this.setState(JSON.parse(JSON.stringify(this.freshState)))}\n                    >\n                    Restart\n                    </button>\n\n                    <button\n                        className={\"undo-button\"}\n                        onClick={() => this.undo()}\n                    >\n                        Undo\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nclass Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {date: new Date()};\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        });\n    }\n\n    render() {\n        return (\n            <p>\n                Time: {this.state.date.toLocaleTimeString()}\n            </p>\n        )\n    }\n}\n// ========================================\n\nReactDOM.render(\n    (\n        <div>\n            <Clock/>\n            <Game numRow={3} numCol={3}/>\n        </div>\n        ),\n  document.getElementById('root')\n);\n"],"sourceRoot":""}